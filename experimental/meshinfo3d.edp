/* Educate us something about the internal structure of 3D mesh's
 *
 *  Solve possion equation in solid blocks an write simulation
 *  simulation results to tridata3dbox.txt
 *
 * Author: Chloros2 <chloros2@gmx.de>
 * Created: 2018-05-19
 *
 * Copyright (C) 2018 Chloros2 <chloros2@gmx.de>
 * 
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hopeC that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see
 * <https://www.gnu.org/licenses/>.
 *
 */

load "msh3"
load "medit"

int C1=11,C2=22,C3=33,C4=44;

cout.precision(3);

real w0 = 2.0, h0 = 3.0;

border C01(t=0,w0){ x=t; y=0; label=C1;};
border C02(t=w0,0){ x=t; y=h0; label=C2;};
border C03(t=0,h0){ x=w0; y=t; label=C3;};
border C04(t=h0,0){ x=0; y=t; label=C4;};

int f=2;
int k=2*f;
int n=2*f;
int m=5*f;
int l=1*f;

mesh Th=buildmesh(C01(k)+C03(n)+C02(k)+C04(n));


int[int] rup=[0,2],
         rdown=[0,3],
         rmid=[C1,1,
               C2,4,
               C3,5,
               C4,6],
         rtet=[0,0];

real zmin=0,zmax=1.0;

mesh3 Th3d=buildlayers(Th,l,
                       zbound=[zmin,zmax],
                       reftet=rtet,
                       labelmid=rmid,
                       labelup=rup,
                       labeldown=rdown);

fespace Vh(Th3d,P2);
Vh u,v;
macro Grad(u) [dx(u),dy(u),dz(u)] // EOM

real lambda=30;
real To=1.0;

problem Poisson(u,v,solver=CG) = 
               int3d(Th3d)( Grad(u)'*Grad(v) )
               +on(2,u=1) // dirichlet deckel
               +on(3,u=0)
;

Poisson; 

cout << endl;
cout << "- four vertex nodes for each tedrahedron" << endl;
cout << "- x,y,z are the spatial coordinates and u the scalar" << endl;
cout << "- first number denotes the point inde" << endl;
ofstream tetdata ("tetrahedrondata.txt");
for (int i=0; i<Th3d.nt; i++){
  for (int j=0; j<4; j++){
    tetdata << Th3d[i][j].x << ";"
            << Th3d[i][j].y << ";"
            << Th3d[i][j].z << ";"
            << u[][Vh(i,j)] << ";"
            << Th3d[i][j] << "\n";

    cout << "Th[" << i << "][" << j << "]=" << Th3d[i][j]
         << "\tx=" << Th3d[i][j].x
         << "\ty=" << Th3d[i][j].y
         << "\tz=" << Th3d[i][j].z
         << "\tlabel=" << Th3d[i][j].label
         << "\tu=" << u[][Vh(i,j)] << endl;
  }
}

cout << endl;
cout << "- three vertex nodes for each boundary triangle" << endl;
cout << "- x,y,z are the spatial coordinates and u the scalar" << endl;
cout << "- first number is a running number" << endl;
int idx;
int nbelement = Th3d.nbe;
ofstream nodesdata ("boundarynodes.txt");
  for (int k=0;k<nbelement;++k){
    for (int num=0;num<3;num++){
        //if (Th3d.be(k).label == C1)
       idx = Th3d.be(k)[num];

       nodesdata << Th3d(idx).x << ";"
                 << Th3d(idx).y << ";"
                 << Th3d(idx).z << ";"
                 << u[][idx] << ";"
                 << Th3d.be(k)[num] << "\n";

       cout << "Th.be(" << k << ")[" << num << "]=" << Th3d.be(k)[num]
            << "\tx=" << Th3d(idx).x
            << "\ty=" << Th3d(idx).y
            << "\tz=" << Th3d(idx).z
            << "\tu=" << u[][idx] << endl;
   }
}

medit("U",Th3d,u);

