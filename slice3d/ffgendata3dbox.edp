/*ffgendata3dbox.edp Generates some 3d fantasy art vertex/triangle data
 *                   in order to be plot in Matlab
 *
 *  Solve possion equation in solid blocks an write simulation
 *  simulation results to tridata3dbox.txt
 *
 * Author: Chloros2 <chloros2@gmx.de>
 * Created: 2018-05-19
 *
 * Copyright (C) 2018 Chloros2 <chloros2@gmx.de>
 * 
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hopeC that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see
 * <https://www.gnu.org/licenses/>.
 *
 */

load "msh3"
load "medit"

int C1=90,C2=91,C3=92,C4=93;

real w0=1, h0=1;
border C01(t=0,w0){x=t; y=0; label=C1;};
border C02(t=w0,0){x=t; y=h0; label=C1;};
border C03(t=0,h0){x=w0; y=t; label=C1;};
border C04(t=h0,0){x=0; y=t; label=C1;};

real w1=0.4;
real h1=0.4;
real posX1=w0/2;
real posY1=h0/2;
border C11(t=0,w1){x=posX1+t; y=posY1; label=C2;};
border C12(t=w1,0){x=posX1+t; y=posY1+h1; label=C2;};
border C13(t=0,h1){x=posX1+w1; y=posY1+t; label=C4;};
border C14(t=h1,0){x=posX1; y=posY1+t; label=C3;};

int n=10;
int m=40;
mesh Th1=buildmesh(C01(w0*n)+C03(h0*n)+C02(w0*n)+C04(h0*n)
                  +C11(-w1*m)+C12(-w1*m)+C13(-h1*m)+C14(-h1*m) );

int[int] rup=[0,2],
         rdown=[0,3],
         rmid=[C1,1,
               C2,4],
         rtet=[0,0];

real zmin=0,zmax=0.4;
mesh3 Th13d=buildlayers(Th1,n,
                        zbound=[zmin,zmax],
                        reftet=rtet,
                        labelmid=rmid,
                        labelup=rup,
                        labeldown=rdown);

mesh Th2=buildmesh(C11(w1*m)+C12(w1*m)+C13(h1*m)+C14(h1*m));

int[int] r2up=[0,9],
         r2down=[0,5],
         r2mid=[C2,6,
                C3,7,
                C4,8],
         r2tet=[0,0];

zmin=zmax+0.1;zmax=zmax+0.2;
mesh3 Th23d=buildlayers(Th2,n,
                        zbound=[zmin,zmax],
                        reftet=r2tet,
                        labelmid=r2mid,
                        labelup=r2up,
                        labeldown=r2down);

mesh3 Th33d=Th23d+Th13d;

fespace Vh(Th33d,P1);
Vh u,v;

macro Grad(u) [dx(u),dy(u),dz(u)] // EOM

problem Poisson(u,v,solver=CG) =
               int3d(Th33d)( Grad(u)'*Grad(v) )
               +on(2,u=1)
               +on(3,u=0)
               +on(7,u=1)
               +on(8,u=0);

Poisson;

ofstream tetdata ("tetrahedrondata.txt");
for (int i=0; i<Th33d.nt; i++){
  for (int j=0; j<4; j++){
    tetdata << Th33d[i][j].x << ";"
            << Th33d[i][j].y << ";"
            << Th33d[i][j].z << ";"
            << u[][Vh(i,j)] << "\n";

  }
}

int idx;
int nbelement=Th33d.nbe;
ofstream bedata ("tridata3dbox.txt");
for (int k=0;k<nbelement;++k){
  for (int num=0;num<3;num++){
    idx = Th33d.be(k)[num];
    bedata << Th33d(idx).x << ";"
           << Th33d(idx).y << ";"
           << Th33d(idx).z << ";"
           << u[][idx] << "\n";
  }
}

medit("U",Th33d,u);
