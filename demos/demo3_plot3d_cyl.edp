/*demo3_plot3d_cyl.edp Generates a cylindrical 3d mesh and writes
 *                     the boundary data (triangles).
 *
 *  Solve possion equation in solid blocks an write simulation
 *  simulation results.
 *
 * Author: Chloros2 <chloros2@gmx.de>
 * Created: 2018-05-19
 *
 * Copyright (C) 2018 Chloros2 <chloros2@gmx.de>
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hopeC that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see
 * <https://www.gnu.org/licenses/>.
 *
 */

load "msh3"
load "medit"

int C1=90,C2=91,C3=92,C4=93;

border outer(t=0,2*pi){ x=cos(t); y=sin(t);label=C1;}

int n1=40,n2=20;
mesh Th2d=buildmesh(outer(n1));

int[int] rup=[0,2],
         rdown=[0,3],
         rmid=[C1,1],
         rtet=[0,0];

real z0=0,z1=2;
mesh3 Th3d=buildlayers(Th2d,n2,
                       zbound=[z0,z1],
                       reftet=rtet,
                       labelmid=rmid,
                       labelup=rup,
                       labeldown=rdown);

int idx;
int nbelement=Th3d.nbe;
ofstream bedata ("temp_demo3_bddata3d_cyl.txt");
for (int k=0;k<nbelement;++k){
  for (int num=0;num<3;num++){
    idx = Th3d.be(k)[num];
    bedata << Th3d(idx).x << ";"
           << Th3d(idx).y << ";"
           << Th3d(idx).z << "\n";
  }
}

medit("cyl",Th3d,wait=1);
