/*demo3_plot3d_box.edp Generates a box like 3d mesh and writes
 *                     the boundary data (triangles).
 *
 *  Solve possion equation in a solid block an write simulation
 *  results.
 *
 * Author: Chloros2 <chloros2@gmx.de>
 * Created: 2018-05-19
 *
 * Copyright (C) 2018 Chloros2 <chloros2@gmx.de>
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hopeC that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see
 * <https://www.gnu.org/licenses/>.
 *
 */

load "msh3"
load "medit"

int C1=90,C2=91,C3=92,C4=93,C5=94;

real w0=1, h0=1;
border C01(t=0,w0){x=t; y=0; label=C1;};
border C02(t=w0,0){x=t; y=h0; label=C1;};
border C03(t=0,h0){x=w0; y=t; label=C1;};
border C04(t=h0,0){x=0; y=t; label=C1;};

real w1=0.4;
real h1=0.4;
real posX1=0.1;
real posY1=0.1;
border C11(t=0,w1){x=posX1+t; y=posY1; label=C2;};
border C12(t=w1,0){x=posX1+t; y=posY1+h1; label=C3;};
border C13(t=0,h1){x=posX1+w1; y=posY1+t; label=C4;};
border C14(t=h1,0){x=posX1; y=posY1+t; label=C5;};

int n=10, m=30, k=10;
mesh Th2d=buildmesh(C01(w0*n)+C03(h0*n)+C02(w0*n)+C04(h0*n)
                   +C11(-w1*m)+C12(-w1*m)+C13(-h1*m)+C14(-h1*m));

int[int] rup=[0,1],
         rdown=[0,2],
         rmid=[C2,3,
               C3,4,
               C4,5,
               C5,6],
         rtet=[0,0];

real z0=0, z1=0.4;
mesh3 Th3d=buildlayers(Th2d,k,
                       zbound=[z0,z1],
                       reftet=rtet,
                       labelmid=rmid,
                       labelup=rup,
                       labeldown=rdown);

fespace Vh(Th3d,P1);
Vh u,v;

macro Grad(u) [dx(u),dy(u),dz(u)] // EOM

problem Poisson(u,v,solver=CG) =
               int3d(Th3d)( Grad(u)'*Grad(v) )
               + on(2,u=0)
               - int2d(Th3d,3)(1*v)
               - int2d(Th3d,4)(1*v)
               - int2d(Th3d,5)(1*v)
               - int2d(Th3d,6)(1*v);

Poisson;

int idx;
int nbelement=Th3d.nbe;
ofstream bedata ("temp_demo3_bddata3d_box.txt");
for (int k=0;k<nbelement;++k){
  for (int num=0;num<3;num++){
    idx = Th3d.be(k)[num];
    bedata << Th3d(idx).x << ";"
           << Th3d(idx).y << ";"
           << Th3d(idx).z << ";"
           << u(Th3d(idx).x,Th3d(idx).y,Th3d(idx).z) << "\n";
  }
}

medit("U",Th3d,u);
